name: Dependabot Auto-Approve and Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  auto-approve-and-merge:
    if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve Dependabot PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request ? context.payload.pull_request.number : context.issue.number;
            try {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE'
              });
            } catch (e) {
              core.warning(`Approval failed: ${e.message}`);
            }

      - name: Enable auto-merge if checks pass
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr ? pr.number : context.issue.number;

            // Only merge when PR is mergeable and all checks succeed
            const { data: prData } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            if (prData.draft) {
              core.info('PR is draft, skipping auto-merge.');
              return;
            }

            // Require green status
            const combined = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: prData.head.sha
            });

            const success = combined.data.state === 'success';
            if (!success) {
              core.info(`Checks not successful: ${combined.data.state}`);
              return;
            }

            // Use merge queue or squash merge depending on repo settings
            try {
              await github.graphql(`
                mutation($prId: ID!) {
                  enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: SQUASH }) {
                    clientMutationId
                  }
                }
              `, { prId: prData.node_id });
              core.info('Auto-merge enabled.');
            } catch (e) {
              core.warning(`Failed to enable auto-merge via GraphQL: ${e.message}`);
            }
